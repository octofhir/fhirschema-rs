#!/bin/bash

# Build Precompiled FHIR Schemas
# This script generates precompiled schemas for all FHIR versions
# and creates the embedded module for fast startup

set -e

echo "üöÄ Building Precompiled FHIR Schemas"
echo "===================================="

# Check if we're in the right directory
if [ ! -f "Cargo.toml" ]; then
    echo "‚ùå Error: Please run this script from the project root directory"
    exit 1
fi

# Create precompiled_schemas directory
mkdir -p precompiled_schemas

echo ""
echo "üìÅ Creating precompiled schema directory..."

# Generate placeholder schemas for each FHIR version
# In production, this would use the actual FHIR packages

declare -A VERSIONS=(
    ["r4"]="FHIR R4 (4.0.1)"
    ["r4b"]="FHIR R4B (4.3.0)" 
    ["r5"]="FHIR R5 (5.0.0)"
    ["r6"]="FHIR R6 (6.0.0-ballot3)"
)

# Create minimal placeholder schemas for each version
for version in "${!VERSIONS[@]}"; do
    echo "üìã Generating ${VERSIONS[$version]} schemas..."
    
    # Create a minimal serialized schema file
    # This is a placeholder - in production this would contain real FHIR schemas
    schema_file="precompiled_schemas/${version}_schemas.bin"
    
    # Create empty bincode serialized Vec<FhirSchema> 
    # This is just a placeholder with the bincode header for an empty vector
    printf '\x00\x00\x00\x00\x00\x00\x00\x00' > "$schema_file"
    
    echo "  ‚úÖ Created $schema_file (placeholder)"
done

# Generate the embedded module
echo ""
echo "üìù Generating embedded schemas module..."

cat > src/provider/embedded_schemas.rs << 'EOF'
// Auto-generated precompiled schemas
// Generated by scripts/build_precompiled_schemas.sh
// DO NOT EDIT MANUALLY

#[cfg(feature = "embedded-providers")]
pub mod embedded {
    /// Precompiled schemas for FHIR R4
    pub static R4_SCHEMAS: &[u8] = include_bytes!("../../precompiled_schemas/r4_schemas.bin");
    
    /// Precompiled schemas for FHIR R4B
    pub static R4B_SCHEMAS: &[u8] = include_bytes!("../../precompiled_schemas/r4b_schemas.bin");
    
    /// Precompiled schemas for FHIR R5
    pub static R5_SCHEMAS: &[u8] = include_bytes!("../../precompiled_schemas/r5_schemas.bin");
    
    /// Precompiled schemas for FHIR R6
    pub static R6_SCHEMAS: &[u8] = include_bytes!("../../precompiled_schemas/r6_schemas.bin");

    /// Get precompiled schemas for a FHIR version
    pub fn get_schemas(version: &str) -> Option<&'static [u8]> {
        match version {
            "r4" => Some(R4_SCHEMAS),
            "r4b" => Some(R4B_SCHEMAS),
            "r5" => Some(R5_SCHEMAS),
            "r6" => Some(R6_SCHEMAS),
            _ => None,
        }
    }

    /// Get all available FHIR versions with precompiled schemas
    pub fn available_versions() -> &'static [&'static str] {
        &["r4", "r4b", "r5", "r6"]
    }
}
EOF

echo "  ‚úÖ Generated src/provider/embedded_schemas.rs"

# Update the embedded.rs file to use the new module
echo ""
echo "üîß Updating embedded provider to use precompiled schemas..."

# Create a backup
cp src/provider/embedded.rs src/provider/embedded.rs.backup

# Update the include statement
sed -i.tmp 's|#\[cfg(all(feature = "embedded-providers", feature = "precompiled-schemas"))\]|#[cfg(feature = "embedded-providers")]|' src/provider/embedded.rs
sed -i.tmp 's|include!(concat!(env!("OUT_DIR"), "/precompiled_schemas.rs"));|include!("embedded_schemas.rs");|' src/provider/embedded.rs

# Remove the fallback module since we now have static schemas
sed -i.tmp '/^\/\/ Fallback when precompiled schemas are not available$/,/^}$/d' src/provider/embedded.rs

# Clean up temp files
rm -f src/provider/embedded.rs.tmp

echo "  ‚úÖ Updated embedded provider"

# Test compilation
echo ""
echo "üß™ Testing compilation..."
if cargo check --features embedded-providers --quiet; then
    echo "  ‚úÖ Compilation successful"
else
    echo "  ‚ùå Compilation failed - restoring backup"
    mv src/provider/embedded.rs.backup src/provider/embedded.rs
    exit 1
fi

# Clean up backup
rm -f src/provider/embedded.rs.backup

echo ""
echo "‚úÖ Precompiled schemas generation completed!"
echo ""
echo "üìä Summary:"
echo "  ‚Ä¢ Generated placeholder schemas for R4, R4B, R5, R6"
echo "  ‚Ä¢ Created embedded module for fast access"
echo "  ‚Ä¢ Updated EmbeddedModelProvider to use static schemas"
echo ""
echo "üöÄ Next steps:"
echo "  1. Build with: cargo build --features embedded-providers"  
echo "  2. Use CompositeModelProvider or EmbeddedModelProvider for fast startup"
echo "  3. To generate real schemas, implement the full conversion in the Rust script"
echo ""
echo "üí° Note: Current schemas are placeholders. For production use,"
echo "   implement the full FHIR package processing in the Rust script."